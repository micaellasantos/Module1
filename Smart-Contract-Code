// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract Bookstore {
    struct Book {
        uint256 id;
        uint256 price;
        bool available;
    }

    mapping(uint256 => Book) public books;
    uint256 public totalBooks;

    event BookPurchased(uint256 indexed id, uint256 price);

    function addBook(uint256 _price) public {
        assert(_price != 0);
        totalBooks++;
        books[totalBooks] = Book(totalBooks, _price, true);
    }

  function buyBook(uint256 _id, uint256 _price) public payable {
        require(books[_id].available, "Book is not available");
        if(_price != books[_id].price){
            revert("Books Price is not available");
        }
        totalBooks--;
        books[_id].available = false;
        emit BookPurchased(_id, books[_id].price);
    }
    function bookAvailability(uint256 _id) public view returns (bool) {
        return books[_id].available;
    }
}
